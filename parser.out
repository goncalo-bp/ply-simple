Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    LCHAV
    LEX
    LRBRAC
    QUOTE
    RCHAV
    RRBRAC
    YACC

Grammar

Rule 0     S' -> PROG
Rule 1     PROG -> LEXER GRAM
Rule 2     LEXER -> LIT IGN TOK TRULES
Rule 3     IGN -> PERC IGNORE EQUALS SSTR
Rule 4     LIT -> PERC LITERALS EQUALS SSTR
Rule 5     TOK -> PERC TOKENS EQUALS LIST
Rule 6     TRULES -> TRULE TRULES
Rule 7     TRULES -> TERR
Rule 8     TRULE -> REGEX RETURN LBRAC SSTR COMMA ARGS RBRAC
Rule 9     TERR -> REGEX ERROR LBRAC INSTS RBRAC
Rule 10    INSTS -> INSTS COMMA ARG
Rule 11    INSTS -> ARG
Rule 12    ARGS -> ARGS COMMA ARG
Rule 13    ARGS -> ARG
Rule 14    ARG -> STR
Rule 15    ARG -> NUMBER
Rule 16    ARG -> STR LBRAC ARG RBRAC
Rule 17    ARG -> STR LIST
Rule 18    ARG -> STR DOT ARG
Rule 19    ARG -> INDEX
Rule 20    ARG -> SSTR
Rule 21    GRAM -> PRCDNC GRULES
Rule 22    PRCDNC -> PERC PRECEDENCE EQUALS LIST
Rule 23    GRULES -> GRULES GRULE
Rule 24    GRULES -> GRULE
Rule 25    GRULE -> STR DDOT PARAMS CHAVSTXT
Rule 26    PARAMS -> PARAMS PARAM
Rule 27    PARAMS -> PARAM
Rule 28    PARAM -> STR
Rule 29    PARAM -> PELICA SYM PELICA
Rule 30    SYM -> EQUALS
Rule 31    SYM -> PLUS
Rule 32    SYM -> MINUS
Rule 33    SYM -> TIMES
Rule 34    SYM -> DIVIDE

Terminals, with rules where they appear

BACKSLASH            : 
CHAVSTXT             : 25
COMMA                : 8 10 12
DDOT                 : 25
DIVIDE               : 34
DOT                  : 18
EQUALS               : 3 4 5 22 30
ERROR                : 9
IGNORE               : 3
INDEX                : 19
LBRAC                : 8 9 16
LCHAV                : 
LEX                  : 
LIST                 : 5 17 22
LITERALS             : 4
LRBRAC               : 
MINUS                : 32
NUMBER               : 15
PELICA               : 29 29
PERC                 : 3 4 5 22
PLUS                 : 31
PRECEDENCE           : 22
QUOTE                : 
RBRAC                : 8 9 16
RCHAV                : 
REGEX                : 8 9
RETURN               : 8
RRBRAC               : 
SSTR                 : 3 4 8 20
STR                  : 14 16 17 18 25 28
TIMES                : 33
TOKENS               : 5
YACC                 : 
error                : 

Nonterminals, with rules where they appear

ARG                  : 10 11 12 13 16 18
ARGS                 : 8 12
GRAM                 : 1
GRULE                : 23 24
GRULES               : 21 23
IGN                  : 2
INSTS                : 9 10
LEXER                : 1
LIT                  : 2
PARAM                : 26 27
PARAMS               : 25 26
PRCDNC               : 21
PROG                 : 0
SYM                  : 29
TERR                 : 7
TOK                  : 2
TRULE                : 6
TRULES               : 2 6

Parsing method: LALR

state 0

    (0) S' -> . PROG
    (1) PROG -> . LEXER GRAM
    (2) LEXER -> . LIT IGN TOK TRULES
    (4) LIT -> . PERC LITERALS EQUALS SSTR

    PERC            shift and go to state 4

    PROG                           shift and go to state 1
    LEXER                          shift and go to state 2
    LIT                            shift and go to state 3

state 1

    (0) S' -> PROG .



state 2

    (1) PROG -> LEXER . GRAM
    (21) GRAM -> . PRCDNC GRULES
    (22) PRCDNC -> . PERC PRECEDENCE EQUALS LIST

    PERC            shift and go to state 7

    GRAM                           shift and go to state 5
    PRCDNC                         shift and go to state 6

state 3

    (2) LEXER -> LIT . IGN TOK TRULES
    (3) IGN -> . PERC IGNORE EQUALS SSTR

    PERC            shift and go to state 9

    IGN                            shift and go to state 8

state 4

    (4) LIT -> PERC . LITERALS EQUALS SSTR

    LITERALS        shift and go to state 10


state 5

    (1) PROG -> LEXER GRAM .

    $end            reduce using rule 1 (PROG -> LEXER GRAM .)


state 6

    (21) GRAM -> PRCDNC . GRULES
    (23) GRULES -> . GRULES GRULE
    (24) GRULES -> . GRULE
    (25) GRULE -> . STR DDOT PARAMS CHAVSTXT

    STR             shift and go to state 13

    GRULES                         shift and go to state 11
    GRULE                          shift and go to state 12

state 7

    (22) PRCDNC -> PERC . PRECEDENCE EQUALS LIST

    PRECEDENCE      shift and go to state 14


state 8

    (2) LEXER -> LIT IGN . TOK TRULES
    (5) TOK -> . PERC TOKENS EQUALS LIST

    PERC            shift and go to state 16

    TOK                            shift and go to state 15

state 9

    (3) IGN -> PERC . IGNORE EQUALS SSTR

    IGNORE          shift and go to state 17


state 10

    (4) LIT -> PERC LITERALS . EQUALS SSTR

    EQUALS          shift and go to state 18


state 11

    (21) GRAM -> PRCDNC GRULES .
    (23) GRULES -> GRULES . GRULE
    (25) GRULE -> . STR DDOT PARAMS CHAVSTXT

    $end            reduce using rule 21 (GRAM -> PRCDNC GRULES .)
    STR             shift and go to state 13

    GRULE                          shift and go to state 19

state 12

    (24) GRULES -> GRULE .

    STR             reduce using rule 24 (GRULES -> GRULE .)
    $end            reduce using rule 24 (GRULES -> GRULE .)


state 13

    (25) GRULE -> STR . DDOT PARAMS CHAVSTXT

    DDOT            shift and go to state 20


state 14

    (22) PRCDNC -> PERC PRECEDENCE . EQUALS LIST

    EQUALS          shift and go to state 21


state 15

    (2) LEXER -> LIT IGN TOK . TRULES
    (6) TRULES -> . TRULE TRULES
    (7) TRULES -> . TERR
    (8) TRULE -> . REGEX RETURN LBRAC SSTR COMMA ARGS RBRAC
    (9) TERR -> . REGEX ERROR LBRAC INSTS RBRAC

    REGEX           shift and go to state 25

    TRULES                         shift and go to state 22
    TRULE                          shift and go to state 23
    TERR                           shift and go to state 24

state 16

    (5) TOK -> PERC . TOKENS EQUALS LIST

    TOKENS          shift and go to state 26


state 17

    (3) IGN -> PERC IGNORE . EQUALS SSTR

    EQUALS          shift and go to state 27


state 18

    (4) LIT -> PERC LITERALS EQUALS . SSTR

    SSTR            shift and go to state 28


state 19

    (23) GRULES -> GRULES GRULE .

    STR             reduce using rule 23 (GRULES -> GRULES GRULE .)
    $end            reduce using rule 23 (GRULES -> GRULES GRULE .)


state 20

    (25) GRULE -> STR DDOT . PARAMS CHAVSTXT
    (26) PARAMS -> . PARAMS PARAM
    (27) PARAMS -> . PARAM
    (28) PARAM -> . STR
    (29) PARAM -> . PELICA SYM PELICA

    STR             shift and go to state 29
    PELICA          shift and go to state 32

    PARAMS                         shift and go to state 30
    PARAM                          shift and go to state 31

state 21

    (22) PRCDNC -> PERC PRECEDENCE EQUALS . LIST

    LIST            shift and go to state 33


state 22

    (2) LEXER -> LIT IGN TOK TRULES .

    PERC            reduce using rule 2 (LEXER -> LIT IGN TOK TRULES .)


state 23

    (6) TRULES -> TRULE . TRULES
    (6) TRULES -> . TRULE TRULES
    (7) TRULES -> . TERR
    (8) TRULE -> . REGEX RETURN LBRAC SSTR COMMA ARGS RBRAC
    (9) TERR -> . REGEX ERROR LBRAC INSTS RBRAC

    REGEX           shift and go to state 25

    TRULE                          shift and go to state 23
    TRULES                         shift and go to state 34
    TERR                           shift and go to state 24

state 24

    (7) TRULES -> TERR .

    PERC            reduce using rule 7 (TRULES -> TERR .)


state 25

    (8) TRULE -> REGEX . RETURN LBRAC SSTR COMMA ARGS RBRAC
    (9) TERR -> REGEX . ERROR LBRAC INSTS RBRAC

    RETURN          shift and go to state 35
    ERROR           shift and go to state 36


state 26

    (5) TOK -> PERC TOKENS . EQUALS LIST

    EQUALS          shift and go to state 37


state 27

    (3) IGN -> PERC IGNORE EQUALS . SSTR

    SSTR            shift and go to state 38


state 28

    (4) LIT -> PERC LITERALS EQUALS SSTR .

    PERC            reduce using rule 4 (LIT -> PERC LITERALS EQUALS SSTR .)


state 29

    (28) PARAM -> STR .

    CHAVSTXT        reduce using rule 28 (PARAM -> STR .)
    STR             reduce using rule 28 (PARAM -> STR .)
    PELICA          reduce using rule 28 (PARAM -> STR .)


state 30

    (25) GRULE -> STR DDOT PARAMS . CHAVSTXT
    (26) PARAMS -> PARAMS . PARAM
    (28) PARAM -> . STR
    (29) PARAM -> . PELICA SYM PELICA

    CHAVSTXT        shift and go to state 39
    STR             shift and go to state 29
    PELICA          shift and go to state 32

    PARAM                          shift and go to state 40

state 31

    (27) PARAMS -> PARAM .

    CHAVSTXT        reduce using rule 27 (PARAMS -> PARAM .)
    STR             reduce using rule 27 (PARAMS -> PARAM .)
    PELICA          reduce using rule 27 (PARAMS -> PARAM .)


state 32

    (29) PARAM -> PELICA . SYM PELICA
    (30) SYM -> . EQUALS
    (31) SYM -> . PLUS
    (32) SYM -> . MINUS
    (33) SYM -> . TIMES
    (34) SYM -> . DIVIDE

    EQUALS          shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46

    SYM                            shift and go to state 41

state 33

    (22) PRCDNC -> PERC PRECEDENCE EQUALS LIST .

    STR             reduce using rule 22 (PRCDNC -> PERC PRECEDENCE EQUALS LIST .)


state 34

    (6) TRULES -> TRULE TRULES .

    PERC            reduce using rule 6 (TRULES -> TRULE TRULES .)


state 35

    (8) TRULE -> REGEX RETURN . LBRAC SSTR COMMA ARGS RBRAC

    LBRAC           shift and go to state 47


state 36

    (9) TERR -> REGEX ERROR . LBRAC INSTS RBRAC

    LBRAC           shift and go to state 48


state 37

    (5) TOK -> PERC TOKENS EQUALS . LIST

    LIST            shift and go to state 49


state 38

    (3) IGN -> PERC IGNORE EQUALS SSTR .

    PERC            reduce using rule 3 (IGN -> PERC IGNORE EQUALS SSTR .)


state 39

    (25) GRULE -> STR DDOT PARAMS CHAVSTXT .

    STR             reduce using rule 25 (GRULE -> STR DDOT PARAMS CHAVSTXT .)
    $end            reduce using rule 25 (GRULE -> STR DDOT PARAMS CHAVSTXT .)


state 40

    (26) PARAMS -> PARAMS PARAM .

    CHAVSTXT        reduce using rule 26 (PARAMS -> PARAMS PARAM .)
    STR             reduce using rule 26 (PARAMS -> PARAMS PARAM .)
    PELICA          reduce using rule 26 (PARAMS -> PARAMS PARAM .)


state 41

    (29) PARAM -> PELICA SYM . PELICA

    PELICA          shift and go to state 50


state 42

    (30) SYM -> EQUALS .

    PELICA          reduce using rule 30 (SYM -> EQUALS .)


state 43

    (31) SYM -> PLUS .

    PELICA          reduce using rule 31 (SYM -> PLUS .)


state 44

    (32) SYM -> MINUS .

    PELICA          reduce using rule 32 (SYM -> MINUS .)


state 45

    (33) SYM -> TIMES .

    PELICA          reduce using rule 33 (SYM -> TIMES .)


state 46

    (34) SYM -> DIVIDE .

    PELICA          reduce using rule 34 (SYM -> DIVIDE .)


state 47

    (8) TRULE -> REGEX RETURN LBRAC . SSTR COMMA ARGS RBRAC

    SSTR            shift and go to state 51


state 48

    (9) TERR -> REGEX ERROR LBRAC . INSTS RBRAC
    (10) INSTS -> . INSTS COMMA ARG
    (11) INSTS -> . ARG
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    INSTS                          shift and go to state 52
    ARG                            shift and go to state 53

state 49

    (5) TOK -> PERC TOKENS EQUALS LIST .

    REGEX           reduce using rule 5 (TOK -> PERC TOKENS EQUALS LIST .)


state 50

    (29) PARAM -> PELICA SYM PELICA .

    CHAVSTXT        reduce using rule 29 (PARAM -> PELICA SYM PELICA .)
    STR             reduce using rule 29 (PARAM -> PELICA SYM PELICA .)
    PELICA          reduce using rule 29 (PARAM -> PELICA SYM PELICA .)


state 51

    (8) TRULE -> REGEX RETURN LBRAC SSTR . COMMA ARGS RBRAC

    COMMA           shift and go to state 58


state 52

    (9) TERR -> REGEX ERROR LBRAC INSTS . RBRAC
    (10) INSTS -> INSTS . COMMA ARG

    RBRAC           shift and go to state 59
    COMMA           shift and go to state 60


state 53

    (11) INSTS -> ARG .

    RBRAC           reduce using rule 11 (INSTS -> ARG .)
    COMMA           reduce using rule 11 (INSTS -> ARG .)


state 54

    (14) ARG -> STR .
    (16) ARG -> STR . LBRAC ARG RBRAC
    (17) ARG -> STR . LIST
    (18) ARG -> STR . DOT ARG

    RBRAC           reduce using rule 14 (ARG -> STR .)
    COMMA           reduce using rule 14 (ARG -> STR .)
    LBRAC           shift and go to state 61
    LIST            shift and go to state 62
    DOT             shift and go to state 63


state 55

    (15) ARG -> NUMBER .

    RBRAC           reduce using rule 15 (ARG -> NUMBER .)
    COMMA           reduce using rule 15 (ARG -> NUMBER .)


state 56

    (19) ARG -> INDEX .

    RBRAC           reduce using rule 19 (ARG -> INDEX .)
    COMMA           reduce using rule 19 (ARG -> INDEX .)


state 57

    (20) ARG -> SSTR .

    RBRAC           reduce using rule 20 (ARG -> SSTR .)
    COMMA           reduce using rule 20 (ARG -> SSTR .)


state 58

    (8) TRULE -> REGEX RETURN LBRAC SSTR COMMA . ARGS RBRAC
    (12) ARGS -> . ARGS COMMA ARG
    (13) ARGS -> . ARG
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    ARGS                           shift and go to state 64
    ARG                            shift and go to state 65

state 59

    (9) TERR -> REGEX ERROR LBRAC INSTS RBRAC .

    PERC            reduce using rule 9 (TERR -> REGEX ERROR LBRAC INSTS RBRAC .)


state 60

    (10) INSTS -> INSTS COMMA . ARG
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    ARG                            shift and go to state 66

state 61

    (16) ARG -> STR LBRAC . ARG RBRAC
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    ARG                            shift and go to state 67

state 62

    (17) ARG -> STR LIST .

    RBRAC           reduce using rule 17 (ARG -> STR LIST .)
    COMMA           reduce using rule 17 (ARG -> STR LIST .)


state 63

    (18) ARG -> STR DOT . ARG
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    ARG                            shift and go to state 68

state 64

    (8) TRULE -> REGEX RETURN LBRAC SSTR COMMA ARGS . RBRAC
    (12) ARGS -> ARGS . COMMA ARG

    RBRAC           shift and go to state 70
    COMMA           shift and go to state 69


state 65

    (13) ARGS -> ARG .

    RBRAC           reduce using rule 13 (ARGS -> ARG .)
    COMMA           reduce using rule 13 (ARGS -> ARG .)


state 66

    (10) INSTS -> INSTS COMMA ARG .

    RBRAC           reduce using rule 10 (INSTS -> INSTS COMMA ARG .)
    COMMA           reduce using rule 10 (INSTS -> INSTS COMMA ARG .)


state 67

    (16) ARG -> STR LBRAC ARG . RBRAC

    RBRAC           shift and go to state 71


state 68

    (18) ARG -> STR DOT ARG .

    RBRAC           reduce using rule 18 (ARG -> STR DOT ARG .)
    COMMA           reduce using rule 18 (ARG -> STR DOT ARG .)


state 69

    (12) ARGS -> ARGS COMMA . ARG
    (14) ARG -> . STR
    (15) ARG -> . NUMBER
    (16) ARG -> . STR LBRAC ARG RBRAC
    (17) ARG -> . STR LIST
    (18) ARG -> . STR DOT ARG
    (19) ARG -> . INDEX
    (20) ARG -> . SSTR

    STR             shift and go to state 54
    NUMBER          shift and go to state 55
    INDEX           shift and go to state 56
    SSTR            shift and go to state 57

    ARG                            shift and go to state 72

state 70

    (8) TRULE -> REGEX RETURN LBRAC SSTR COMMA ARGS RBRAC .

    REGEX           reduce using rule 8 (TRULE -> REGEX RETURN LBRAC SSTR COMMA ARGS RBRAC .)


state 71

    (16) ARG -> STR LBRAC ARG RBRAC .

    RBRAC           reduce using rule 16 (ARG -> STR LBRAC ARG RBRAC .)
    COMMA           reduce using rule 16 (ARG -> STR LBRAC ARG RBRAC .)


state 72

    (12) ARGS -> ARGS COMMA ARG .

    RBRAC           reduce using rule 12 (ARGS -> ARGS COMMA ARG .)
    COMMA           reduce using rule 12 (ARGS -> ARGS COMMA ARG .)


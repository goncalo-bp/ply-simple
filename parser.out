Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BSLASH
    COMMA
    DOT
    EQ
    Float
    Int
    LCHAV
    LESS
    LPAR
    LSPAR
    MINUS
    MORE
    PELICA
    PERC
    PLUS
    QUOTE
    RCHAV
    RPAR
    RSPAR
    SLASH
    Str
    TIMES
    UNDERSCORE

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> LexBegin Lexer YaccBegin Yacc CodeBegin Code
Rule 2     Lexer -> LexLits LexIgnore LexTokens LexRules LexErr
Rule 3     LexLits -> LexLiterals
Rule 4     LexLits -> <empty>
Rule 5     LexRules -> LexRules LexRule
Rule 6     LexRules -> LexRule
Rule 7     LexErr -> LexError
Rule 8     Yacc -> YaccPrecedence YaccTS YaccRules
Rule 9     YaccRules -> YaccRules YaccRule
Rule 10    YaccRules -> YaccRule
Rule 11    Code -> Code CodeAll
Rule 12    Code -> CodeAll

Terminals, with rules where they appear

BSLASH               : 
COMMA                : 
CodeAll              : 11 12
CodeBegin            : 1
DOT                  : 
EQ                   : 
Float                : 
Int                  : 
LCHAV                : 
LESS                 : 
LPAR                 : 
LSPAR                : 
LexBegin             : 1
LexError             : 7
LexIgnore            : 2
LexLiterals          : 3
LexRule              : 5 6
LexTokens            : 2
MINUS                : 
MORE                 : 
PELICA               : 
PERC                 : 
PLUS                 : 
QUOTE                : 
RCHAV                : 
RPAR                 : 
RSPAR                : 
SLASH                : 
Str                  : 
TIMES                : 
UNDERSCORE           : 
YaccBegin            : 1
YaccPrecedence       : 8
YaccRule             : 9 10
YaccTS               : 8
error                : 

Nonterminals, with rules where they appear

Code                 : 1 11
LexErr               : 2
LexLits              : 2
LexRules             : 2 5
Lexer                : 1
Prog                 : 0
Yacc                 : 1
YaccRules            : 8 9

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . LexBegin Lexer YaccBegin Yacc CodeBegin Code

    LexBegin        shift and go to state 2

    Prog                           shift and go to state 1

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> LexBegin . Lexer YaccBegin Yacc CodeBegin Code
    (2) Lexer -> . LexLits LexIgnore LexTokens LexRules LexErr
    (3) LexLits -> . LexLiterals
    (4) LexLits -> .

    LexLiterals     shift and go to state 5
    LexIgnore       reduce using rule 4 (LexLits -> .)

    Lexer                          shift and go to state 3
    LexLits                        shift and go to state 4

state 3

    (1) Prog -> LexBegin Lexer . YaccBegin Yacc CodeBegin Code

    YaccBegin       shift and go to state 6


state 4

    (2) Lexer -> LexLits . LexIgnore LexTokens LexRules LexErr

    LexIgnore       shift and go to state 7


state 5

    (3) LexLits -> LexLiterals .

    LexIgnore       reduce using rule 3 (LexLits -> LexLiterals .)


state 6

    (1) Prog -> LexBegin Lexer YaccBegin . Yacc CodeBegin Code
    (8) Yacc -> . YaccPrecedence YaccTS YaccRules

    YaccPrecedence  shift and go to state 9

    Yacc                           shift and go to state 8

state 7

    (2) Lexer -> LexLits LexIgnore . LexTokens LexRules LexErr

    LexTokens       shift and go to state 10


state 8

    (1) Prog -> LexBegin Lexer YaccBegin Yacc . CodeBegin Code

    CodeBegin       shift and go to state 11


state 9

    (8) Yacc -> YaccPrecedence . YaccTS YaccRules

    YaccTS          shift and go to state 12


state 10

    (2) Lexer -> LexLits LexIgnore LexTokens . LexRules LexErr
    (5) LexRules -> . LexRules LexRule
    (6) LexRules -> . LexRule

    LexRule         shift and go to state 14

    LexRules                       shift and go to state 13

state 11

    (1) Prog -> LexBegin Lexer YaccBegin Yacc CodeBegin . Code
    (11) Code -> . Code CodeAll
    (12) Code -> . CodeAll

    CodeAll         shift and go to state 16

    Code                           shift and go to state 15

state 12

    (8) Yacc -> YaccPrecedence YaccTS . YaccRules
    (9) YaccRules -> . YaccRules YaccRule
    (10) YaccRules -> . YaccRule

    YaccRule        shift and go to state 18

    YaccRules                      shift and go to state 17

state 13

    (2) Lexer -> LexLits LexIgnore LexTokens LexRules . LexErr
    (5) LexRules -> LexRules . LexRule
    (7) LexErr -> . LexError

    LexRule         shift and go to state 20
    LexError        shift and go to state 21

    LexErr                         shift and go to state 19

state 14

    (6) LexRules -> LexRule .

    LexRule         reduce using rule 6 (LexRules -> LexRule .)
    LexError        reduce using rule 6 (LexRules -> LexRule .)


state 15

    (1) Prog -> LexBegin Lexer YaccBegin Yacc CodeBegin Code .
    (11) Code -> Code . CodeAll

    $end            reduce using rule 1 (Prog -> LexBegin Lexer YaccBegin Yacc CodeBegin Code .)
    CodeAll         shift and go to state 22


state 16

    (12) Code -> CodeAll .

    CodeAll         reduce using rule 12 (Code -> CodeAll .)
    $end            reduce using rule 12 (Code -> CodeAll .)


state 17

    (8) Yacc -> YaccPrecedence YaccTS YaccRules .
    (9) YaccRules -> YaccRules . YaccRule

    CodeBegin       reduce using rule 8 (Yacc -> YaccPrecedence YaccTS YaccRules .)
    YaccRule        shift and go to state 23


state 18

    (10) YaccRules -> YaccRule .

    YaccRule        reduce using rule 10 (YaccRules -> YaccRule .)
    CodeBegin       reduce using rule 10 (YaccRules -> YaccRule .)


state 19

    (2) Lexer -> LexLits LexIgnore LexTokens LexRules LexErr .

    YaccBegin       reduce using rule 2 (Lexer -> LexLits LexIgnore LexTokens LexRules LexErr .)


state 20

    (5) LexRules -> LexRules LexRule .

    LexRule         reduce using rule 5 (LexRules -> LexRules LexRule .)
    LexError        reduce using rule 5 (LexRules -> LexRules LexRule .)


state 21

    (7) LexErr -> LexError .

    YaccBegin       reduce using rule 7 (LexErr -> LexError .)


state 22

    (11) Code -> Code CodeAll .

    CodeAll         reduce using rule 11 (Code -> Code CodeAll .)
    $end            reduce using rule 11 (Code -> Code CodeAll .)


state 23

    (9) YaccRules -> YaccRules YaccRule .

    YaccRule        reduce using rule 9 (YaccRules -> YaccRules YaccRule .)
    CodeBegin       reduce using rule 9 (YaccRules -> YaccRules YaccRule .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Z
Rule 1     Z -> Dir
Rule 2     Dir -> ( texto Ficheiros SubDirs )
Rule 3     Ficheiros -> [ texto RestoFicheiros ]
Rule 4     Ficheiros -> <empty>
Rule 5     RestoFicheiros -> texto RestoFicheiros
Rule 6     RestoFicheiros -> <empty>
Rule 7     SubDirs -> Dir SubDirs
Rule 8     SubDirs -> <empty>

Terminals, with rules where they appear

(                    : 2
)                    : 2
[                    : 3
]                    : 3
error                : 
texto                : 2 3 5

Nonterminals, with rules where they appear

Dir                  : 1 7
Ficheiros            : 2
RestoFicheiros       : 3 5
SubDirs              : 2 7
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . Dir
    (2) Dir -> . ( texto Ficheiros SubDirs )

    (               shift and go to state 3

    Z                              shift and go to state 1
    Dir                            shift and go to state 2

state 1

    (0) S' -> Z .



state 2

    (1) Z -> Dir .

    $end            reduce using rule 1 (Z -> Dir .)


state 3

    (2) Dir -> ( . texto Ficheiros SubDirs )

    texto           shift and go to state 4


state 4

    (2) Dir -> ( texto . Ficheiros SubDirs )
    (3) Ficheiros -> . [ texto RestoFicheiros ]
    (4) Ficheiros -> .

    [               shift and go to state 6
    (               reduce using rule 4 (Ficheiros -> .)
    )               reduce using rule 4 (Ficheiros -> .)

    Ficheiros                      shift and go to state 5

state 5

    (2) Dir -> ( texto Ficheiros . SubDirs )
    (7) SubDirs -> . Dir SubDirs
    (8) SubDirs -> .
    (2) Dir -> . ( texto Ficheiros SubDirs )

    )               reduce using rule 8 (SubDirs -> .)
    (               shift and go to state 3

    SubDirs                        shift and go to state 7
    Dir                            shift and go to state 8

state 6

    (3) Ficheiros -> [ . texto RestoFicheiros ]

    texto           shift and go to state 9


state 7

    (2) Dir -> ( texto Ficheiros SubDirs . )

    )               shift and go to state 10


state 8

    (7) SubDirs -> Dir . SubDirs
    (7) SubDirs -> . Dir SubDirs
    (8) SubDirs -> .
    (2) Dir -> . ( texto Ficheiros SubDirs )

    )               reduce using rule 8 (SubDirs -> .)
    (               shift and go to state 3

    Dir                            shift and go to state 8
    SubDirs                        shift and go to state 11

state 9

    (3) Ficheiros -> [ texto . RestoFicheiros ]
    (5) RestoFicheiros -> . texto RestoFicheiros
    (6) RestoFicheiros -> .

    texto           shift and go to state 12
    ]               reduce using rule 6 (RestoFicheiros -> .)

    RestoFicheiros                 shift and go to state 13

state 10

    (2) Dir -> ( texto Ficheiros SubDirs ) .

    $end            reduce using rule 2 (Dir -> ( texto Ficheiros SubDirs ) .)
    (               reduce using rule 2 (Dir -> ( texto Ficheiros SubDirs ) .)
    )               reduce using rule 2 (Dir -> ( texto Ficheiros SubDirs ) .)


state 11

    (7) SubDirs -> Dir SubDirs .

    )               reduce using rule 7 (SubDirs -> Dir SubDirs .)


state 12

    (5) RestoFicheiros -> texto . RestoFicheiros
    (5) RestoFicheiros -> . texto RestoFicheiros
    (6) RestoFicheiros -> .

    texto           shift and go to state 12
    ]               reduce using rule 6 (RestoFicheiros -> .)

    RestoFicheiros                 shift and go to state 14

state 13

    (3) Ficheiros -> [ texto RestoFicheiros . ]

    ]               shift and go to state 15


state 14

    (5) RestoFicheiros -> texto RestoFicheiros .

    ]               reduce using rule 5 (RestoFicheiros -> texto RestoFicheiros .)


state 15

    (3) Ficheiros -> [ texto RestoFicheiros ] .

    (               reduce using rule 3 (Ficheiros -> [ texto RestoFicheiros ] .)
    )               reduce using rule 3 (Ficheiros -> [ texto RestoFicheiros ] .)


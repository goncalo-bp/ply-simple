%% LEX

%literals = "+-/*=()"
%ignore = " \t\n"
%tokens = [ 'VAR','NUMBER' ]

r'[a-zA-Z_][a-zA-Z0-9_]*'   return("VAR")

r'\d+(\.\d+)?'              return("NUMBER", t.value = float(t.value))

r'.'    error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]", t.lexer.skip(1) )

%% YACC

%precedence = [ ('left','+','-'), ('left','*','/'), ('right','UMINUS'), ]

ts = { }

stat : VAR '=' exp { ts[t[1]] = t[3] }
stat : exp { print(t[1]) }

exp : exp '+' exp { t[0] = t[1] + t[3] }
exp : exp '-' exp { t[0] = t[1] - t[3] }
exp : exp '*' exp { t[0] = t[1] * t[3] }
exp : exp '/' exp { t[0] = t[1] / t[3] }
exp : '-' exp %prec UMINUS { t[0] = -t[2] }
exp : '(' exp ')' { t[0] = t[2] }
exp : NUMBER { t[0] = t[1] }
exp : VAR { t[0] = getval(t[1]) }

%%

from ply.lex import lex
from ply.yacc import yacc

def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")

def getval(n):
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)

lexer = lex()

y=yacc()
y.parse("3+4*7")